{"version":3,"sources":["component/CustomExtension.tsx","component/ExtensionList.tsx","App.tsx","index.tsx"],"names":["CustomExtension","props","useState","userExtension","setUserExtension","Grid","container","direction","justify","alignItems","spacing","item","xs","TextField","id","size","label","variant","value","onChange","event","currentTarget","length","Button","onClick","a","addExtension","ExtensionList","Box","border","borderRadius","maxWidth","extensionList","map","idx","key","deleteCustomExtension","fixedEncodeURI","str","encodeURI","replace","App","Set","extensions","setExtensions","batCheck","has","cmdCheck","comCheck","cplCheck","exeCheck","scrCheck","jsCheck","server","useEffect","axios","get","result","data","newExtensions","forEach","add","extension","console","log","initExtensions","addCustomExtension","newExtension","put","oldExtension","delete","checkBoxOnClick","ext","FormControl","FormGroup","row","FormControlLabel","control","Checkbox","checked","Array","from","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.129959c5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Grid, TextField, Button } from \"@material-ui/core\"\n\ninterface CustomExtensionProps {\n  addExtension: (newExtension: string) => Promise<void>\n}\n\nconst CustomExtension = (props: CustomExtensionProps) => {\n  const [userExtension, setUserExtension] = useState(\"\")\n\n  return (\n    <Grid container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      spacing={2}\n    >\n      <Grid item xs>\n        <form>\n          <TextField id=\"outlined-basic\"\n            size=\"small\"\n            label=\"확장자 입력\"\n            variant=\"standard\"\n            value={userExtension}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.currentTarget.value.length <= 20) {\n                setUserExtension(event.currentTarget.value)\n              }\n            }} />\n        </form>\n      </Grid>\n      <Grid item xs>\n        <Button variant=\"outlined\"\n          onClick={async() => {\n            await props.addExtension(userExtension)\n          }}\n          size=\"small\">\n          추가\n          </Button>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default CustomExtension\n","\nimport React, { useState } from 'react';\nimport { Grid, TextField, Button, Box } from \"@material-ui/core\"\n\ninterface ExtensionListProps {\n  extensionList: Array<string>\n  deleteCustomExtension: (oldExtension: string) => void\n}\nconst ExtensionList = (props: ExtensionListProps) => {\n\n  return (\n    <Box border={1} borderRadius={4} maxWidth=\"50%\">\n      <Grid container\n        direction=\"column\"\n        justify=\"center\"\n        spacing={2}\n      >\n        <Grid item xs>\n          {`${props.extensionList.length} / 200`}\n        </Grid>\n        <Grid item>\n          {props.extensionList.map((value, idx) => {\n            return (\n              <Button key={idx}\n                variant=\"outlined\"\n                size=\"small\"\n                onClick={\n                  () => { props.deleteCustomExtension(value) }\n                }>\n                {value}\n              </Button>\n            )\n          })}\n        </Grid>\n\n      </Grid>\n    </Box>\n  )\n}\n\nexport default ExtensionList","\nimport React, { useEffect, useState } from 'react';\nimport CustomExtension from './component/CustomExtension'\nimport ExtensionList from './component/ExtensionList'\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, Grid } from \"@material-ui/core\"\nimport axios from 'axios';\n\ninterface GetAllExtensions {\n  extensionList: Extension[]\n}\ninterface Extension {\n  extension: string\n}\n\nfunction fixedEncodeURI(str: string) {\n  return encodeURI(str).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n}\n\nconst App = () => {\n  const [extensions, setExtensions] = useState<Set<string>>(new Set)\n  const batCheck = extensions.has(\"bat\")\n  const cmdCheck = extensions.has(\"cmd\")\n  const comCheck = extensions.has(\"com\")\n  const cplCheck = extensions.has(\"cpl\")\n  const exeCheck = extensions.has(\"exe\")\n  const scrCheck = extensions.has(\"scr\")\n  const jsCheck = extensions.has(\"js\")\n\n  const server = \"http://35.197.107.144:8000\"\n\n  useEffect(() => {\n    const initExtensions = async () => {\n      try {\n        const result = ((await axios.get(fixedEncodeURI(`${server}/api/extension`))).data) as GetAllExtensions\n        const newExtensions = new Set<string>()\n        result.extensionList.forEach((value) => {\n          newExtensions.add(value.extension)\n        })\n        setExtensions(newExtensions)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n    initExtensions()\n  }, [])\n\n  const addCustomExtension = async (newExtension: string) => {\n    if (extensions.size < 200) {\n      try {\n        await axios.put(fixedEncodeURI(`${server}/api/extension?extensionName=${newExtension}`))\n        const newExtensions = new Set(extensions)\n        newExtensions.add(newExtension)\n        setExtensions(newExtensions)\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n  const deleteCustomExtension = async (oldExtension: string) => {\n    try {\n      await axios.delete(fixedEncodeURI(`${server}/api/extension?extensionName=${oldExtension}`))\n      const newExtensions = new Set(extensions)\n      newExtensions.delete(oldExtension)\n      setExtensions(newExtensions)\n    } catch (error) {\n\n    }\n  }\n  const checkBoxOnClick = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const ext = event.currentTarget.value\n    console.log(ext)\n    if (extensions.has(ext)) {\n      await deleteCustomExtension(ext)\n    }\n    else {\n      await addCustomExtension(ext)\n    }\n  }\n\n  return (\n    <Grid container\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n      spacing={2}\n    >\n      <Grid item>\n        <Grid container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Grid item xs>\n            고정 확장자\n          </Grid>\n          <Grid item>\n            <FormControl>\n              <FormGroup row={true}>\n                <FormControlLabel\n                  control={<Checkbox checked={batCheck} value=\"bat\"\n                    onChange={checkBoxOnClick} />}\n                  label=\"bat\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={cmdCheck} value=\"cmd\"\n                    onChange={checkBoxOnClick} />}\n                  label=\"cmd\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={comCheck} value=\"com\"\n                    onChange={checkBoxOnClick} />}\n                  label=\"com\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={cplCheck} value=\"cpl\"\n                    onChange={checkBoxOnClick} />}\n                  label=\"cpl\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={exeCheck} value=\"exe\"\n                    onChange={checkBoxOnClick} />}\n                  label=\"exe\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={scrCheck} value=\"scr\"\n                    onChange={checkBoxOnClick} />}\n                  label=\"scr\"\n                />\n                <FormControlLabel\n                  control={<Checkbox checked={jsCheck} value=\"js\"\n                    onChange={checkBoxOnClick} />}\n                  label=\"js\"\n                />\n\n              </FormGroup>\n            </FormControl>\n          </Grid>\n\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Grid item xs>\n            커스텀 확장자\n          </Grid>\n          <Grid item>\n            <Grid container\n              direction=\"column\"\n              justify=\"center\"\n              spacing={2}\n            >\n\n              <Grid item>\n                <CustomExtension addExtension={addCustomExtension} />\n              </Grid>\n              <Grid item>\n                <ExtensionList extensionList={Array.from(extensions)}\n                  deleteCustomExtension={deleteCustomExtension} />\n              </Grid>\n            </Grid>\n\n          </Grid>\n\n        </Grid>\n      </Grid>\n\n    </Grid>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}